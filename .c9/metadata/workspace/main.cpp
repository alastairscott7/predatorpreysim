{"filter":false,"title":"main.cpp","tooltip":"/main.cpp","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":150,"column":41},"end":{"row":150,"column":42},"action":"insert","lines":[" "],"id":10478}],[{"start":{"row":150,"column":42},"end":{"row":150,"column":43},"action":"insert","lines":["d"],"id":10479}],[{"start":{"row":150,"column":43},"end":{"row":150,"column":44},"action":"insert","lines":["o"],"id":10480}],[{"start":{"row":150,"column":44},"end":{"row":150,"column":45},"action":"insert","lines":["o"],"id":10481}],[{"start":{"row":150,"column":45},"end":{"row":150,"column":46},"action":"insert","lines":["d"],"id":10482}],[{"start":{"row":150,"column":46},"end":{"row":150,"column":47},"action":"insert","lines":["l"],"id":10483}],[{"start":{"row":150,"column":47},"end":{"row":150,"column":48},"action":"insert","lines":["e"],"id":10484}],[{"start":{"row":150,"column":48},"end":{"row":150,"column":49},"action":"insert","lines":["b"],"id":10485}],[{"start":{"row":150,"column":49},"end":{"row":150,"column":50},"action":"insert","lines":["u"],"id":10486}],[{"start":{"row":150,"column":50},"end":{"row":150,"column":51},"action":"insert","lines":["g"],"id":10487}],[{"start":{"row":152,"column":21},"end":{"row":153,"column":0},"action":"insert","lines":["",""],"id":10488},{"start":{"row":153,"column":0},"end":{"row":153,"column":24},"action":"insert","lines":["                        "]}],[{"start":{"row":153,"column":24},"end":{"row":153,"column":25},"action":"insert","lines":["/"],"id":10489}],[{"start":{"row":153,"column":25},"end":{"row":153,"column":26},"action":"insert","lines":["/"],"id":10490}],[{"start":{"row":153,"column":26},"end":{"row":153,"column":27},"action":"insert","lines":["m"],"id":10491}],[{"start":{"row":153,"column":27},"end":{"row":153,"column":28},"action":"insert","lines":["o"],"id":10492}],[{"start":{"row":153,"column":28},"end":{"row":153,"column":29},"action":"insert","lines":["v"],"id":10493}],[{"start":{"row":153,"column":29},"end":{"row":153,"column":30},"action":"insert","lines":["e"],"id":10494}],[{"start":{"row":153,"column":30},"end":{"row":153,"column":31},"action":"insert","lines":[" "],"id":10495}],[{"start":{"row":153,"column":31},"end":{"row":153,"column":32},"action":"insert","lines":["d"],"id":10496}],[{"start":{"row":153,"column":32},"end":{"row":153,"column":33},"action":"insert","lines":["o"],"id":10497}],[{"start":{"row":153,"column":33},"end":{"row":153,"column":34},"action":"insert","lines":["o"],"id":10498}],[{"start":{"row":153,"column":34},"end":{"row":153,"column":35},"action":"insert","lines":["d"],"id":10499}],[{"start":{"row":153,"column":35},"end":{"row":153,"column":36},"action":"insert","lines":["l"],"id":10500}],[{"start":{"row":153,"column":36},"end":{"row":153,"column":37},"action":"insert","lines":["e"],"id":10501}],[{"start":{"row":153,"column":37},"end":{"row":153,"column":38},"action":"insert","lines":["b"],"id":10502}],[{"start":{"row":153,"column":38},"end":{"row":153,"column":39},"action":"insert","lines":["u"],"id":10503}],[{"start":{"row":153,"column":39},"end":{"row":153,"column":40},"action":"insert","lines":["g"],"id":10504}],[{"start":{"row":160,"column":4},"end":{"row":161,"column":0},"action":"insert","lines":["",""],"id":10505},{"start":{"row":161,"column":0},"end":{"row":161,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":161,"column":4},"end":{"row":161,"column":5},"action":"insert","lines":["/"],"id":10506}],[{"start":{"row":161,"column":5},"end":{"row":161,"column":6},"action":"insert","lines":["/"],"id":10507}],[{"start":{"row":161,"column":6},"end":{"row":161,"column":7},"action":"insert","lines":["n"],"id":10508}],[{"start":{"row":161,"column":7},"end":{"row":161,"column":8},"action":"insert","lines":["e"],"id":10509}],[{"start":{"row":161,"column":8},"end":{"row":161,"column":9},"action":"insert","lines":["x"],"id":10510}],[{"start":{"row":161,"column":9},"end":{"row":161,"column":10},"action":"insert","lines":[" "],"id":10511}],[{"start":{"row":161,"column":9},"end":{"row":161,"column":10},"action":"remove","lines":[" "],"id":10512}],[{"start":{"row":161,"column":9},"end":{"row":161,"column":10},"action":"insert","lines":["t"],"id":10513}],[{"start":{"row":161,"column":10},"end":{"row":161,"column":11},"action":"insert","lines":[" "],"id":10514}],[{"start":{"row":161,"column":11},"end":{"row":161,"column":12},"action":"insert","lines":["m"],"id":10515}],[{"start":{"row":161,"column":12},"end":{"row":161,"column":13},"action":"insert","lines":["o"],"id":10516}],[{"start":{"row":161,"column":13},"end":{"row":161,"column":14},"action":"insert","lines":["v"],"id":10517}],[{"start":{"row":161,"column":14},"end":{"row":161,"column":15},"action":"insert","lines":["e"],"id":10518}],[{"start":{"row":161,"column":15},"end":{"row":161,"column":16},"action":"insert","lines":[" "],"id":10519}],[{"start":{"row":161,"column":16},"end":{"row":161,"column":17},"action":"insert","lines":["a"],"id":10520}],[{"start":{"row":161,"column":17},"end":{"row":161,"column":18},"action":"insert","lines":["n"],"id":10521}],[{"start":{"row":161,"column":18},"end":{"row":161,"column":19},"action":"insert","lines":["t"],"id":10522}],[{"start":{"row":161,"column":19},"end":{"row":161,"column":20},"action":"insert","lines":["s"],"id":10523}],[{"start":{"row":171,"column":17},"end":{"row":172,"column":0},"action":"insert","lines":["",""],"id":10524},{"start":{"row":172,"column":0},"end":{"row":172,"column":20},"action":"insert","lines":["                    "]}],[{"start":{"row":172,"column":20},"end":{"row":172,"column":21},"action":"insert","lines":["c"],"id":10525}],[{"start":{"row":172,"column":21},"end":{"row":172,"column":22},"action":"insert","lines":["h"],"id":10526}],[{"start":{"row":172,"column":22},"end":{"row":172,"column":23},"action":"insert","lines":["e"],"id":10527}],[{"start":{"row":172,"column":23},"end":{"row":172,"column":24},"action":"insert","lines":["c"],"id":10528}],[{"start":{"row":172,"column":24},"end":{"row":172,"column":25},"action":"insert","lines":["k"],"id":10529}],[{"start":{"row":172,"column":25},"end":{"row":172,"column":26},"action":"insert","lines":[" "],"id":10530}],[{"start":{"row":172,"column":26},"end":{"row":172,"column":27},"action":"insert","lines":["o"],"id":10531}],[{"start":{"row":172,"column":27},"end":{"row":172,"column":28},"action":"insert","lines":["r"],"id":10532}],[{"start":{"row":172,"column":28},"end":{"row":172,"column":29},"action":"insert","lines":["g"],"id":10533}],[{"start":{"row":172,"column":29},"end":{"row":172,"column":30},"action":"insert","lines":["a"],"id":10534}],[{"start":{"row":172,"column":30},"end":{"row":172,"column":31},"action":"insert","lines":["n"],"id":10535}],[{"start":{"row":172,"column":31},"end":{"row":172,"column":32},"action":"insert","lines":["i"],"id":10536}],[{"start":{"row":172,"column":32},"end":{"row":172,"column":33},"action":"insert","lines":["s"],"id":10537}],[{"start":{"row":172,"column":33},"end":{"row":172,"column":34},"action":"insert","lines":["m"],"id":10538}],[{"start":{"row":172,"column":34},"end":{"row":172,"column":35},"action":"insert","lines":[" "],"id":10539}],[{"start":{"row":172,"column":35},"end":{"row":172,"column":36},"action":"insert","lines":["i"],"id":10540}],[{"start":{"row":172,"column":36},"end":{"row":172,"column":37},"action":"insert","lines":["s"],"id":10541}],[{"start":{"row":172,"column":37},"end":{"row":172,"column":38},"action":"insert","lines":[" "],"id":10542}],[{"start":{"row":172,"column":38},"end":{"row":172,"column":39},"action":"insert","lines":["a"],"id":10543}],[{"start":{"row":172,"column":39},"end":{"row":172,"column":40},"action":"insert","lines":[" "],"id":10544}],[{"start":{"row":172,"column":39},"end":{"row":172,"column":40},"action":"remove","lines":[" "],"id":10545}],[{"start":{"row":172,"column":39},"end":{"row":172,"column":40},"action":"insert","lines":[" "],"id":10546}],[{"start":{"row":172,"column":39},"end":{"row":172,"column":40},"action":"remove","lines":[" "],"id":10547}],[{"start":{"row":172,"column":39},"end":{"row":172,"column":40},"action":"insert","lines":["n"],"id":10548}],[{"start":{"row":172,"column":40},"end":{"row":172,"column":41},"action":"insert","lines":[" "],"id":10549}],[{"start":{"row":172,"column":41},"end":{"row":172,"column":42},"action":"insert","lines":["a"],"id":10550}],[{"start":{"row":172,"column":42},"end":{"row":172,"column":43},"action":"insert","lines":["n"],"id":10551}],[{"start":{"row":172,"column":43},"end":{"row":172,"column":44},"action":"insert","lines":["t"],"id":10552}],[{"start":{"row":172,"column":20},"end":{"row":172,"column":21},"action":"insert","lines":["/"],"id":10553}],[{"start":{"row":172,"column":21},"end":{"row":172,"column":22},"action":"insert","lines":["/"],"id":10554}],[{"start":{"row":174,"column":21},"end":{"row":175,"column":0},"action":"insert","lines":["",""],"id":10555},{"start":{"row":175,"column":0},"end":{"row":175,"column":24},"action":"insert","lines":["                        "]}],[{"start":{"row":175,"column":24},"end":{"row":175,"column":25},"action":"insert","lines":["."],"id":10556}],[{"start":{"row":175,"column":24},"end":{"row":175,"column":25},"action":"remove","lines":["."],"id":10557}],[{"start":{"row":175,"column":24},"end":{"row":175,"column":25},"action":"insert","lines":["/"],"id":10558}],[{"start":{"row":175,"column":25},"end":{"row":175,"column":26},"action":"insert","lines":["/"],"id":10559}],[{"start":{"row":175,"column":26},"end":{"row":175,"column":27},"action":"insert","lines":["m"],"id":10560}],[{"start":{"row":175,"column":27},"end":{"row":175,"column":28},"action":"insert","lines":["o"],"id":10561}],[{"start":{"row":175,"column":28},"end":{"row":175,"column":29},"action":"insert","lines":["v"],"id":10562}],[{"start":{"row":175,"column":29},"end":{"row":175,"column":30},"action":"insert","lines":["e"],"id":10563}],[{"start":{"row":175,"column":30},"end":{"row":175,"column":31},"action":"insert","lines":[" "],"id":10564}],[{"start":{"row":175,"column":31},"end":{"row":175,"column":32},"action":"insert","lines":["a"],"id":10565}],[{"start":{"row":175,"column":32},"end":{"row":175,"column":33},"action":"insert","lines":["n"],"id":10566}],[{"start":{"row":175,"column":33},"end":{"row":175,"column":34},"action":"insert","lines":["t"],"id":10567}],[{"start":{"row":28,"column":0},"end":{"row":275,"column":1},"action":"remove","lines":["//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","//MEMBER FUNCTIONS OF BOARD CLASS","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","","Board::Board()","{","    //This is the default constructor for the board class","    ","    //creating an empty array","    for (int y = 0; y < 20; y++)","        for (int x = 0; x < 20; x++)","            grid[x][y] = nullptr;","","    //Initialize ants and doodlebugs","    initializeBoard();","}","","Board::~Board() ","{","    //This is the destructor for the board class","    ","    //loop to delete all grid elements","    for (int i = 0; i < 20; i++) ","    {","        for (int j = 0; j < 20; j++) ","        {","            if (grid[i][j] != NULL)","            {","                delete grid[i][j];","                grid[i][j] = nullptr;","            }","        }","    }","}","","void Board::drawGrid()","{","    //This member function draws the Ants, Doodlebugs","    //and empty spaces on a 20x20 grid.","    ","    //lineNum gives each line of the grid a number","    int lineNum = 0;","    ","    //This loop decides what symbol represents each element of the grid","    for (int y = 0; y < 20; y++)","    {","        lineNum++;","        //cout << lineNum;","        for (int x = 0; x < 20; x++)","        {","            if (grid[x][y] == nullptr)","            {","                //empty cells","                cout << '.'; ","            }","            else","            {","                //occupied cells","                cout << grid[x][y]->getIdentifier();","            }","        }","        //next line","        cout << endl;","    }","}","","void Board::initializeBoard()","{","    //This member function initializes ants and doodlebugs","    ","    int doodleX, doodleY;","    int antX, antY;","","    //seed random number generator","    srand(time(NULL));","","    //Create 5 doodlebugs","    for (int doodleAmount = 0; doodleAmount < 5; doodleAmount++)","    {","        doodleX = rand() % 20;","        doodleY = rand() % 20;","","        //If cell is occupied try again","        while (grid[doodleX][doodleY] != nullptr)","        {","            doodleX = rand() % 20;","            doodleY = rand() % 20;","        }","        grid[doodleX][doodleY] = new Doodlebug(doodleX, doodleY, this);","    }","    //Create 100 ants","    for (int antAmount = 0; antAmount < 100; antAmount++)","    {","        antX = rand() % 20;","        antY = rand() % 20;","","        //If cell is occupied try again","        while (grid[antX][antY] != nullptr)","        {","            antX = rand() % 20;","            antY = rand() % 20;","        }","        grid[antX][antY] = new Ant(antX, antY, this);","    }","}","","void Board::moveOrganisms()","{","    //This function will move all organisms on the grid if they haven't move","    //yet this turn","    ","    //first move all doodlebugs","    for(int i = 0; i < 20; i++)","    {","        for(int j = 0; j < 20; j++)","        {","            //check for occupied grid spaces","            if(grid[i][j] != NULL)","            {","                //check movement status","                if(grid[i][j]->getMovementStatus() == false)","                {","                    //check organism is a doodlebug","                    if(grid[i][j]->getIdentifier() == 'D')","                    {","                        //move doodlebug","                        grid[i][j]->move();","                    }","                }","            }","        }","    }","    ","    //next move ants","    for(int i = 0; i < 20; i++)","    {","        for(int j = 0; j < 20; j++)","        {","            //check for occupied grid spaces","            if(grid[i][j] != NULL)","            {","                //check movement status","                if(grid[i][j]->getMovementStatus() == false)","                {","                    //check organism is an ant","                    if(grid[i][j]->getIdentifier() == 'A')","                    {","                        //move ant","                        grid[i][j]->move();","                    }","                }","            }","        }","    }","}","","Organism* Board::getOrganism(int x, int y) const ","{","    //This function will return the organism occupying a grid location","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        return grid[x][y];","    } else ","    {","        return NULL;","    }","}","","void Board::setOrganism(int x, int y, Organism* newOrganism) ","{","    //This function will set the organism at a certain grid location","    //to a new organism passed into the function","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        grid[x][y] = newOrganism;","    }","}","","void Board::setNewAnt(int x, int y)","{","    //This function will create a new and at location passed in","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        grid[x][y] = new Ant(x, y, this);","    }","}","","void Board::setNewDoodle(int x, int y)","{","    //This function will create a new doodlebug at location passed in","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        grid[x][y] = new Doodlebug(x, y, this);","    }","}","","void Board::breedOrganisms()","{","    //This function will attempt to make all organisms breed in the grid","    ","    for(int i = 0; i < 20; i++)","    {","        for(int j = 0; j < 20; j++)","        {","            if(grid[i][j] != NULL)","            {","                grid[i][j]->breed();","            }","        }","    }","}","","void Board::starveOrganisms()","{","    //This function will starve all doodlebugs that have not eaten recently","    for (int i = 0; i < 20; i++) ","    {","        for (int j = 0; j < 20; j++)","        {","            //check for doodlebugs that are starving","            if ((grid[i][j] != NULL) && grid[i][j]->isStarving()) ","            {","                delete grid[i][j];","                grid[i][j] = NULL;","            }","        }","    }","}","","void Board::resetMovementStatus() ","{","    //This function will reset the movement status of all organisms","    //on the grid.","    for(int i = 0; i < 20; i++)","    {","        for (int j = 0; j < 20; j++)","        {","            if(grid[i][j] != NULL)","            {","                grid[i][j]->setMoveStatus(false);","            }","        }","    }","}"],"id":10568}],[{"start":{"row":27,"column":0},"end":{"row":28,"column":0},"action":"remove","lines":["",""],"id":10569}],[{"start":{"row":26,"column":1},"end":{"row":27,"column":0},"action":"remove","lines":["",""],"id":10570}],[{"start":{"row":27,"column":0},"end":{"row":77,"column":0},"action":"remove","lines":["","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","//MEMBER FUNCTIONS OF ORGANISM CLASS","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","","char Organism::getIdentifier()","{","    //used to retrieve organism identifier","    return identifier;","}","","void Organism::setMoveStatus(bool moveStatus) ","{","    //flags the organism as moved or not moved","    moveComplete = moveStatus;","}","","bool Organism::isStarving()","{","    //by default organisms are not starving","    return false;","}","","","bool Organism::getMovementStatus()","{","    //function to check if organism has moved this turn    ","    return moveComplete;","}","","bool Organism::boundaryFlag(int x, int y)","{","    //will return true if coordinates within boundary, or false if outside","    return (x >= 0) && (x < 20) && (y >= 0) && (y < 20);","}","","void Organism::newLocation(int xx, int yy) ","{","    //This function will move an organism to a new location","    ","    //move organism to new location","    organismBoard->setOrganism(xx, yy, organismBoard->getOrganism(xCoord, yCoord));","        ","    //set old location to NULL","    organismBoard->setOrganism(xCoord, yCoord, NULL);","    ","    //update coordinates","    xCoord = xx;","    yCoord = yy;","}",""],"id":10572},{"start":{"row":27,"column":0},"end":{"row":77,"column":0},"action":"insert","lines":["","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","//MEMBER FUNCTIONS OF ORGANISM CLASS","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","","char Organism::getIdentifier()","{","    //used to retrieve organism identifier","    return identifier;","}","","void Organism::setMoveStatus(bool moveStatus) ","{","    //flags the organism as moved or not moved","    moveComplete = moveStatus;","}","","bool Organism::isStarving()","{","    //by default organisms are not starving","    return false;","}","","","bool Organism::getMovementStatus()","{","    //function to check if organism has moved this turn    ","    return moveComplete;","}","","bool Organism::boundaryFlag(int x, int y)","{","    //will return true if coordinates within boundary, or false if outside","    return (x >= 0) && (x < 20) && (y >= 0) && (y < 20);","}","","void Organism::newLocation(int xx, int yy) ","{","    //This function will move an organism to a new location","    ","    //move organism to new location","    organismBoard->setOrganism(xx, yy, organismBoard->getOrganism(xCoord, yCoord));","        ","    //set old location to NULL","    organismBoard->setOrganism(xCoord, yCoord, NULL);","    ","    //update coordinates","    xCoord = xx;","    yCoord = yy;","}",""]}],[{"start":{"row":28,"column":0},"end":{"row":76,"column":1},"action":"remove","lines":["//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","//MEMBER FUNCTIONS OF ORGANISM CLASS","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","","char Organism::getIdentifier()","{","    //used to retrieve organism identifier","    return identifier;","}","","void Organism::setMoveStatus(bool moveStatus) ","{","    //flags the organism as moved or not moved","    moveComplete = moveStatus;","}","","bool Organism::isStarving()","{","    //by default organisms are not starving","    return false;","}","","","bool Organism::getMovementStatus()","{","    //function to check if organism has moved this turn    ","    return moveComplete;","}","","bool Organism::boundaryFlag(int x, int y)","{","    //will return true if coordinates within boundary, or false if outside","    return (x >= 0) && (x < 20) && (y >= 0) && (y < 20);","}","","void Organism::newLocation(int xx, int yy) ","{","    //This function will move an organism to a new location","    ","    //move organism to new location","    organismBoard->setOrganism(xx, yy, organismBoard->getOrganism(xCoord, yCoord));","        ","    //set old location to NULL","    organismBoard->setOrganism(xCoord, yCoord, NULL);","    ","    //update coordinates","    xCoord = xx;","    yCoord = yy;","}"],"id":10574}],[{"start":{"row":29,"column":0},"end":{"row":145,"column":1},"action":"remove","lines":["","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","//MEMBER FUNCTIONS OF ANT SUB-CLASS","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","","Ant::Ant(int xEntry, int yEntry, Board *thisBoard)","{","    //Ant default constructor","    identifier='A';","    xCoord = xEntry;","    yCoord = yEntry;","    organismBoard = thisBoard;","    moveComplete = false;","    breedCounter = 0;","}","","void Ant::move()","{","    //This function will move an ant in a random direction","    ","    //increment breed counter, one more turn towards being able to breed","    breedCounter++;","    ","    //int direction is set to a random direction between 1 and 4","    int direction;","    direction = rand() % 4 + 1;","    ","    //if statement which determines how to move the ant based on what direction was selected","    if(direction == 1)","    {","        //direction 1 is down","        //check that space below is free and valid","        if(organismBoard->getOrganism(xCoord, yCoord + 1) == NULL && boundaryFlag(xCoord, yCoord + 1))","        {","            //call new location function to move one space down","            newLocation(xCoord, yCoord + 1);","            ","            //update move complete so that the ant will not move again this turn","            moveComplete = true;","        }","    }","    else if(direction == 2)","    {","        //direction 2 is right","        //check that space right is free and valid","       if(organismBoard->getOrganism(xCoord + 1, yCoord) == NULL && boundaryFlag(xCoord + 1, yCoord))","        {","            //call new location function to move one space right","            newLocation(xCoord + 1, yCoord);","            ","            //update move complete so that the ant will not move again this turn","            moveComplete = true;","        } ","    }","    else if(direction == 3)","    {","        //direction 3 is up","        //check that space above is free and valid","        if(organismBoard->getOrganism(xCoord, yCoord - 1) == NULL && boundaryFlag(xCoord, yCoord - 1))","        {","            //call new location function to move one space up","            newLocation(xCoord, yCoord - 1);","            ","            //update move complete so that the ant will not move again this turn","            moveComplete = true;","        }","    }","    else if(direction == 4)","    {","        //direction 4 is left","        //check that space left is free and valid","        if(organismBoard->getOrganism(xCoord - 1, yCoord) == NULL && boundaryFlag(xCoord - 1, yCoord))","        {","            //call new location function to move one space left","            newLocation(xCoord - 1, yCoord);","            ","            //update move complete so that the ant will not move again this turn","            moveComplete = true;","        }","    }","}","","void Ant::breed()","{","    //This function will spawn a new ant in an unoccupied cell","    ","    //check if breed counter has exceeded the breeding threshold value","    if(breedCounter >= 3)","    {","        //try to find an unoccupied cell to spawn new ant into, then reset breed counter","        if((organismBoard->getOrganism(xCoord, yCoord + 1) == NULL) && boundaryFlag(xCoord, yCoord + 1))","        {","            organismBoard->setNewAnt(xCoord, yCoord + 1);","            breedCounter = 0;","        }","        else if((organismBoard->getOrganism(xCoord + 1, yCoord) == NULL) && boundaryFlag(xCoord + 1, yCoord))","        {","            organismBoard->setNewAnt(xCoord + 1, yCoord);","            breedCounter = 0;","        }","        else if((organismBoard->getOrganism(xCoord, yCoord - 1) == NULL) && boundaryFlag(xCoord, yCoord - 1))","        {","            organismBoard->setNewAnt(xCoord, yCoord - 1);","            breedCounter = 0;","        }","        else if((organismBoard->getOrganism(xCoord - 1, yCoord) == NULL) && boundaryFlag(xCoord - 1, yCoord))","        {","            organismBoard->setNewAnt(xCoord - 1, yCoord);","            breedCounter = 0;","        }","        else","        {","            //if no cells unoccupied, do not breed","            breedCounter = 0;","        }","    }","}"],"id":10575}],[{"start":{"row":30,"column":0},"end":{"row":193,"column":1},"action":"remove","lines":["","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","//MEMBER FUNCTIONS FOR DOODLEBUG SUB-CLASS","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","","Doodlebug::Doodlebug(int xEntry, int yEntry, Board *thisBoard)","{","    //Doodlebug default constructor","    identifier='D';","    xCoord = xEntry;","    yCoord = yEntry;","    organismBoard = thisBoard;","    moveComplete = false;","    breedCounter = 0;","}","","void Doodlebug::move()","{","    //This function will move the doodlebug in a random direction.","    //If there is an ant near it, the doodlebug will eat the ant","    ","    //update breed and death counters, which will decide when they will breed or die","    breedCounter++;","    deathCounter++;","    ","    //direction is set to a random direction","    int direction;","    direction = rand() % 4 + 1;","    ","    //Check to see if there are ants nearby that can be eaten. If there is,","    //the ant will be deleted and the doodlebug will take it's place. Death","    //counter will also be reset and moveComplete will be set to true.","    if(organismBoard->getOrganism(xCoord, yCoord + 1) != NULL)","    {","        if(organismBoard->getOrganism(xCoord, yCoord + 1)->getIdentifier() == 'A')","        {","            delete organismBoard->getOrganism(xCoord, yCoord + 1);","            newLocation(xCoord, yCoord + 1);","            deathCounter = 0;","            moveComplete = true;","            return;","        }","    }","    if(organismBoard->getOrganism(xCoord + 1, yCoord) != NULL)","    {","        if(organismBoard->getOrganism(xCoord + 1, yCoord)->getIdentifier() == 'A')","        {","            delete organismBoard->getOrganism(xCoord + 1, yCoord);","            newLocation(xCoord + 1, yCoord);","            deathCounter = 0;","            moveComplete = true;","            return;","        }","    }","    if(organismBoard->getOrganism(xCoord, yCoord - 1) != NULL)","    {","        if(organismBoard->getOrganism(xCoord, yCoord - 1)->getIdentifier() == 'A')","        {","            delete organismBoard->getOrganism(xCoord, yCoord - 1);","            newLocation(xCoord, yCoord - 1);","            deathCounter = 0;","            moveComplete = true;","            return;","        }","    }","    if(organismBoard->getOrganism(xCoord - 1, yCoord) != NULL)","    {","        if(organismBoard->getOrganism(xCoord - 1, yCoord)->getIdentifier() == 'A')","        {","            delete organismBoard->getOrganism(xCoord - 1, yCoord);","            newLocation(xCoord - 1, yCoord);","            deathCounter = 0;","            moveComplete = true;","            return;","        }","    }","    ","    //If there are no nearby ants, the doodlebug will move in a random direction","    //based on what direction was set to. This movement works the same as in","    //the ant sub-class","    if(direction == 1)","    {","        if(organismBoard->getOrganism(xCoord, yCoord + 1) == NULL && boundaryFlag(xCoord, yCoord + 1))","        {","            newLocation(xCoord, yCoord + 1);","            moveComplete = true;","        }","    }","    else if(direction == 2)","    {","    if(organismBoard->getOrganism(xCoord + 1, yCoord) == NULL && boundaryFlag(xCoord + 1, yCoord))","        {","            newLocation(xCoord + 1, yCoord);","            moveComplete = true;","        } ","    }","    else if(direction == 3)","    {","        if(organismBoard->getOrganism(xCoord, yCoord - 1) == NULL && boundaryFlag(xCoord, yCoord - 1))","        {","            newLocation(xCoord, yCoord - 1);","            moveComplete = true;","        }","    }","    else if(direction == 4)","    {","        if(organismBoard->getOrganism(xCoord - 1, yCoord) == NULL && boundaryFlag(xCoord - 1, yCoord))","            {","                newLocation(xCoord - 1, yCoord);","                moveComplete = true;","            }","    }","}","","void Doodlebug::breed()","{","    //This function will spawn a new doodlebug in an adjacent cell","    ","    //First check to see if breedcounter has exceeded it's threshold. If it has,","    //spawn new doodlebug in an unoccupied adjacent cell.","    if(breedCounter >= 8)","    {","        if((organismBoard->getOrganism(xCoord, yCoord + 1) == NULL) && boundaryFlag(xCoord, yCoord + 1))","        {","            organismBoard->setNewDoodle(xCoord, yCoord + 1);","            breedCounter = 0;","        }","        else if((organismBoard->getOrganism(xCoord + 1, yCoord) == NULL) && boundaryFlag(xCoord + 1, yCoord))","        {","            organismBoard->setNewDoodle(xCoord + 1, yCoord);","            breedCounter = 0;","        }","        else if((organismBoard->getOrganism(xCoord, yCoord - 1) == NULL) && boundaryFlag(xCoord, yCoord - 1))","        {","            organismBoard->setNewDoodle(xCoord, yCoord - 1);","            breedCounter = 0;","        }","        else if((organismBoard->getOrganism(xCoord - 1, yCoord) == NULL) && boundaryFlag(xCoord - 1, yCoord))","        {","            organismBoard->setNewDoodle(xCoord - 1, yCoord);","            breedCounter = 0;","        }","        else","        {","            //if there's no available spaces, do not breed","            breedCounter = 0;","        }","    }","}","","bool Doodlebug::isStarving()","{","    //this function returns whether or not a doodlebug is starving","    ","    //starving if deathcounter exceeds threshold","    if(deathCounter >= 3)","    {","        return true;","    }","    else","    {","        return false;","    }","}"],"id":10576}],[{"start":{"row":29,"column":0},"end":{"row":30,"column":0},"action":"remove","lines":["",""],"id":10577}],[{"start":{"row":28,"column":0},"end":{"row":29,"column":0},"action":"remove","lines":["",""],"id":10578}],[{"start":{"row":27,"column":0},"end":{"row":28,"column":0},"action":"remove","lines":["",""],"id":10579}],[{"start":{"row":26,"column":1},"end":{"row":27,"column":0},"action":"remove","lines":["",""],"id":10580}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":18,"column":4},"end":{"row":25,"column":5},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":37,"mode":"ace/mode/c_cpp"}},"timestamp":1509155521000,"hash":"f0e67a008498e8080e7dd5ebc946078b61bc34dd"}