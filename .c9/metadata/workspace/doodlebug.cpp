{"filter":false,"title":"doodlebug.cpp","tooltip":"/doodlebug.cpp","undoManager":{"mark":38,"position":38,"stack":[[{"start":{"row":0,"column":0},"end":{"row":163,"column":1},"action":"insert","lines":["","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","//MEMBER FUNCTIONS FOR DOODLEBUG SUB-CLASS","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","","Doodlebug::Doodlebug(int xEntry, int yEntry, Board *thisBoard)","{","    //Doodlebug default constructor","    identifier='D';","    xCoord = xEntry;","    yCoord = yEntry;","    organismBoard = thisBoard;","    moveComplete = false;","    breedCounter = 0;","}","","void Doodlebug::move()","{","    //This function will move the doodlebug in a random direction.","    //If there is an ant near it, the doodlebug will eat the ant","    ","    //update breed and death counters, which will decide when they will breed or die","    breedCounter++;","    deathCounter++;","    ","    //direction is set to a random direction","    int direction;","    direction = rand() % 4 + 1;","    ","    //Check to see if there are ants nearby that can be eaten. If there is,","    //the ant will be deleted and the doodlebug will take it's place. Death","    //counter will also be reset and moveComplete will be set to true.","    if(organismBoard->getOrganism(xCoord, yCoord + 1) != NULL)","    {","        if(organismBoard->getOrganism(xCoord, yCoord + 1)->getIdentifier() == 'A')","        {","            delete organismBoard->getOrganism(xCoord, yCoord + 1);","            newLocation(xCoord, yCoord + 1);","            deathCounter = 0;","            moveComplete = true;","            return;","        }","    }","    if(organismBoard->getOrganism(xCoord + 1, yCoord) != NULL)","    {","        if(organismBoard->getOrganism(xCoord + 1, yCoord)->getIdentifier() == 'A')","        {","            delete organismBoard->getOrganism(xCoord + 1, yCoord);","            newLocation(xCoord + 1, yCoord);","            deathCounter = 0;","            moveComplete = true;","            return;","        }","    }","    if(organismBoard->getOrganism(xCoord, yCoord - 1) != NULL)","    {","        if(organismBoard->getOrganism(xCoord, yCoord - 1)->getIdentifier() == 'A')","        {","            delete organismBoard->getOrganism(xCoord, yCoord - 1);","            newLocation(xCoord, yCoord - 1);","            deathCounter = 0;","            moveComplete = true;","            return;","        }","    }","    if(organismBoard->getOrganism(xCoord - 1, yCoord) != NULL)","    {","        if(organismBoard->getOrganism(xCoord - 1, yCoord)->getIdentifier() == 'A')","        {","            delete organismBoard->getOrganism(xCoord - 1, yCoord);","            newLocation(xCoord - 1, yCoord);","            deathCounter = 0;","            moveComplete = true;","            return;","        }","    }","    ","    //If there are no nearby ants, the doodlebug will move in a random direction","    //based on what direction was set to. This movement works the same as in","    //the ant sub-class","    if(direction == 1)","    {","        if(organismBoard->getOrganism(xCoord, yCoord + 1) == NULL && boundaryFlag(xCoord, yCoord + 1))","        {","            newLocation(xCoord, yCoord + 1);","            moveComplete = true;","        }","    }","    else if(direction == 2)","    {","    if(organismBoard->getOrganism(xCoord + 1, yCoord) == NULL && boundaryFlag(xCoord + 1, yCoord))","        {","            newLocation(xCoord + 1, yCoord);","            moveComplete = true;","        } ","    }","    else if(direction == 3)","    {","        if(organismBoard->getOrganism(xCoord, yCoord - 1) == NULL && boundaryFlag(xCoord, yCoord - 1))","        {","            newLocation(xCoord, yCoord - 1);","            moveComplete = true;","        }","    }","    else if(direction == 4)","    {","        if(organismBoard->getOrganism(xCoord - 1, yCoord) == NULL && boundaryFlag(xCoord - 1, yCoord))","            {","                newLocation(xCoord - 1, yCoord);","                moveComplete = true;","            }","    }","}","","void Doodlebug::breed()","{","    //This function will spawn a new doodlebug in an adjacent cell","    ","    //First check to see if breedcounter has exceeded it's threshold. If it has,","    //spawn new doodlebug in an unoccupied adjacent cell.","    if(breedCounter >= 8)","    {","        if((organismBoard->getOrganism(xCoord, yCoord + 1) == NULL) && boundaryFlag(xCoord, yCoord + 1))","        {","            organismBoard->setNewDoodle(xCoord, yCoord + 1);","            breedCounter = 0;","        }","        else if((organismBoard->getOrganism(xCoord + 1, yCoord) == NULL) && boundaryFlag(xCoord + 1, yCoord))","        {","            organismBoard->setNewDoodle(xCoord + 1, yCoord);","            breedCounter = 0;","        }","        else if((organismBoard->getOrganism(xCoord, yCoord - 1) == NULL) && boundaryFlag(xCoord, yCoord - 1))","        {","            organismBoard->setNewDoodle(xCoord, yCoord - 1);","            breedCounter = 0;","        }","        else if((organismBoard->getOrganism(xCoord - 1, yCoord) == NULL) && boundaryFlag(xCoord - 1, yCoord))","        {","            organismBoard->setNewDoodle(xCoord - 1, yCoord);","            breedCounter = 0;","        }","        else","        {","            //if there's no available spaces, do not breed","            breedCounter = 0;","        }","    }","}","","bool Doodlebug::isStarving()","{","    //this function returns whether or not a doodlebug is starving","    ","    //starving if deathcounter exceeds threshold","    if(deathCounter >= 3)","    {","        return true;","    }","    else","    {","        return false;","    }","}"],"id":13}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":14}],[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":15}],[{"start":{"row":1,"column":0},"end":{"row":4,"column":20},"action":"insert","lines":["","#include \"Bug.h\"","#include \"Organism.h\"","using namespace std;"],"id":16}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"remove","lines":["",""],"id":17}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":18}],[{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"remove","lines":["g"],"id":19}],[{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"remove","lines":["u"],"id":20}],[{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"remove","lines":["B"],"id":21}],[{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":["d"],"id":22}],[{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"insert","lines":["o"],"id":23}],[{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"insert","lines":["d"],"id":24}],[{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"remove","lines":["d"],"id":25}],[{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"insert","lines":["o"],"id":26}],[{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"insert","lines":["d"],"id":27}],[{"start":{"row":0,"column":14},"end":{"row":0,"column":15},"action":"insert","lines":["l"],"id":28}],[{"start":{"row":0,"column":15},"end":{"row":0,"column":16},"action":"insert","lines":["e"],"id":29}],[{"start":{"row":0,"column":16},"end":{"row":0,"column":17},"action":"insert","lines":["b"],"id":30}],[{"start":{"row":0,"column":17},"end":{"row":0,"column":18},"action":"insert","lines":["u"],"id":31}],[{"start":{"row":0,"column":18},"end":{"row":0,"column":19},"action":"insert","lines":["g"],"id":32}],[{"start":{"row":0,"column":10},"end":{"row":0,"column":19},"action":"remove","lines":["doodlebug"],"id":33},{"start":{"row":0,"column":10},"end":{"row":0,"column":19},"action":"insert","lines":["doodlebug"]}],[{"start":{"row":1,"column":17},"end":{"row":1,"column":18},"action":"remove","lines":["m"],"id":34}],[{"start":{"row":1,"column":16},"end":{"row":1,"column":17},"action":"remove","lines":["s"],"id":35}],[{"start":{"row":1,"column":15},"end":{"row":1,"column":16},"action":"remove","lines":["i"],"id":36}],[{"start":{"row":1,"column":14},"end":{"row":1,"column":15},"action":"remove","lines":["n"],"id":37}],[{"start":{"row":1,"column":13},"end":{"row":1,"column":14},"action":"remove","lines":["a"],"id":38}],[{"start":{"row":1,"column":12},"end":{"row":1,"column":13},"action":"remove","lines":["g"],"id":39}],[{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"remove","lines":["r"],"id":40}],[{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"remove","lines":["O"],"id":41}],[{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"insert","lines":["o"],"id":42}],[{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"insert","lines":["r"],"id":43}],[{"start":{"row":1,"column":12},"end":{"row":1,"column":13},"action":"insert","lines":["g"],"id":44}],[{"start":{"row":1,"column":13},"end":{"row":1,"column":14},"action":"insert","lines":["a"],"id":45}],[{"start":{"row":1,"column":14},"end":{"row":1,"column":15},"action":"insert","lines":["n"],"id":46}],[{"start":{"row":1,"column":15},"end":{"row":1,"column":16},"action":"insert","lines":["i"],"id":47}],[{"start":{"row":1,"column":16},"end":{"row":1,"column":17},"action":"insert","lines":["s"],"id":48}],[{"start":{"row":1,"column":17},"end":{"row":1,"column":18},"action":"insert","lines":["m"],"id":49}],[{"start":{"row":1,"column":21},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":50}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":18},"action":"insert","lines":["#include <cstdlib>"],"id":51}]]},"ace":{"folds":[],"scrolltop":857,"scrollleft":0,"selection":{"start":{"row":2,"column":18},"end":{"row":2,"column":18},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":56,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1509157246000,"hash":"07403eb9209a119c25cc31fb95f65d1aa5618585"}