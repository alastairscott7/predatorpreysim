{"changed":true,"filter":false,"title":"hello-cpp-world.cpp","tooltip":"/hello-cpp-world.cpp","value":"#include <iostream>\n#include \"organism.h\"\n#include \"ant.h\"\n#include \"doodlebug.h\"\n#include \"board.h\"\n\nusing namespace std;\n\nint main() {\n    Board simulation;\n    simulation.drawGrid();\n    while(cin.get() == '\\n')\n    {\n        simulation.moveOrganisms();\n        simulation.drawGrid();\n        simulation.resetMovementStatus();\n        \n    }\n}\n\nBoard::Board()\n{\n    //Contructor that creates empty array\n    for (int y = 0; y < 20; y++)\n        for (int x = 0; x < 20; x++)\n            grid[x][y] = nullptr;\n\n    //Initialize ants and doodlebugs\n    initializeBoard();\n}\n\nBoard::~Board() {\n    for (int i = 0; i < 20; i++) \n    {\n        for (int j = 0; j < 20; j++) \n        {\n            if (grid[i][j] != NULL)\n            {\n                delete grid[i][j];\n                grid[i][j] = nullptr;\n            }\n        }\n    }\n}\n\nvoid Board::drawGrid()\n{\n    //This member function draws the Ants, Doodlebugs\n    //and empty spaces using a 20x20 grid.\n    \n    //lineNum gives each line of the grid a number\n    int lineNum = 0;\n    \n    //This loop decides what symbol represents each element of the grid\n    for (int y = 0; y < 20; y++)\n    {\n        lineNum++;\n        cout << lineNum;\n        for (int x = 0; x < 20; x++)\n        {\n            if (grid[x][y] == nullptr)\n            {\n                //empty cells\n                cout << '.'; \n            }\n            else\n            {\n                //occupied cells\n                cout << grid[x][y]->getIdentifier();\n            }\n        }\n        //next line\n        cout << endl;\n    }\n}\n\nvoid Board::initializeBoard()\n{\n    //This member function initializes ants and doodlebugs\n    \n    int doodleX, doodleY;\n    int antX, antY;\n\n    //Create 5 doodlebugs\n    for (int doodleAmount = 0; doodleAmount < 5; doodleAmount++)\n    {\n        doodleX = rand() % 20 + 1;\n        doodleY = rand() % 20 + 1;\n\n        //If cell is occupied try again\n        while (grid[doodleX][doodleY] != nullptr)\n        {\n            doodleX = rand() % 20 + 1;\n            doodleY = rand() % 20 + 1;\n        }\n        grid[doodleX][doodleY] = new Doodlebug(doodleX, doodleY, this);\n    }\n    //Create 100 ants\n    for (int antAmount = 0; antAmount < 10; antAmount++)\n    {\n        antX = rand() % 20 + 1;\n        antY = rand() % 20 + 1;\n\n        //If cell is occupied try again\n        while (grid[antX][antY] != nullptr)\n        {\n            antX = rand() % 20 + 1;\n            antY = rand() % 20 + 1;\n        }\n        grid[antX][antY] = new Ant(antX, antY, this);   //testing out \"this\" - may cause errors\n    }\n}\n\nvoid Board::moveOrganisms()//)OrganismType aType) {\n{\n    for(int i = 0; i < 20; i++)\n    {\n        for(int j = 0; j < 20; j++)\n        {\n            if(grid[i][j] != NULL)\n            {\n                if(grid[i][j]->movementStatus() == false) //&& grid[i][j]->getType() == aType)\n                {\n                grid[i][j]->move();\n                }\n            }\n        }\n    }\n}\n\nOrganism* Board::getOrganism(int x, int y) const \n{\n    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) \n    {\n        return grid[x][y];\n    } else \n    {\n        return NULL;\n    }\n}\n\nvoid Board::setOrganism(int x, int y, Organism* newOrganism) \n{\n    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) \n    {\n        grid[x][y] = newOrganism;\n    }\n}\n\nAnt::Ant(int xEntry, int yEntry, Board *thisBoard)\n{\n    //Ant default constructor\n    identifier='A';\n    xCoord = xEntry;\n    yCoord = yEntry;\n    organismBoard = thisBoard;\n    moveComplete = false;\n}\n\nvoid Ant::move()\n{\n    //breedTicks++;adsadasdadasdasdasdsa\n    int direction;\n    direction = rand() % 4 + 1;\n    \n    if(direction == 1)\n    {\n        if(organismBoard->getOrganism(xCoord, yCoord + 1) == NULL && boundaryFlag(xCoord, yCoord + 1))\n        {\n            newLocation(xCoord, yCoord + 1);\n            moveComplete = true;\n        }\n    }\n    else if(direction == 2)\n    {\n       if(organismBoard->getOrganism(xCoord + 1, yCoord) == NULL && boundaryFlag(xCoord + 1, yCoord))\n        {\n            newLocation(xCoord + 1, yCoord);\n            moveComplete = true;\n        } \n    }\n    else if(direction == 3)\n    {\n        if(organismBoard->getOrganism(xCoord, yCoord - 1) == NULL && boundaryFlag(xCoord, yCoord - 1))\n        {\n            newLocation(xCoord, yCoord - 1);\n            moveComplete = true;\n        }\n    }\n    else if(direction == 4)\n    {\n        if(organismBoard->getOrganism(xCoord - 1, yCoord) == NULL && boundaryFlag(xCoord - 1, yCoord))\n            {\n                newLocation(xCoord - 1, yCoord);\n                moveComplete = true;\n            }\n    }\n}\n\nvoid Doodlebug::move()\n{\n    \n}\n\nDoodlebug::Doodlebug(int xEntry, int yEntry, Board *thisBoard)\n{\n    //Doodlebug default constructor\n    identifier='D';\n    xCoord = xEntry;\n    yCoord = yEntry;\n    organismBoard = thisBoard;\n    moveComplete = false;\n}\n\nchar Organism::getIdentifier()\n{\n    //used to retrieve organism identifier\n    return identifier;\n}\n\n// flags the organism as moved or not\nvoid Organism::changeMoveStatus(bool moveStatus) \n{\n    moveComplete = moveStatus;\n}\n\n//function to check if organism has moved this turn\nbool Organism::movementStatus()\n{\n    return moveComplete;\n}\n\n//will return true if coordinates within boundary, or false if outside\nbool Organism::boundaryFlag(int x, int y)\n{\n    return (x >= 0) && (x < 20) && (y >= 0) && (y < 20);\n}\n\n//moving organism to new location\nvoid Organism::newLocation(int xx, int yy) {\n        \n        //move organism to new location\n        organismBoard->setOrganism(xx, yy, organismBoard->getOrganism(xCoord, yCoord));\n        \n        //set old location to NULL\n        organismBoard->setOrganism(xCoord, yCoord, NULL);\n        \n        //update coordinates\n        xCoord = xx;\n        yCoord = yy;\n}\n\n//\nvoid Board::resetMovementStatus() {\n    for(int i = 0; i < 20; i++)\n    {\n        for (int j = 0; j < 20; j++)\n        {\n            if(grid[i][j] != NULL)\n            {\n                grid[i][j]->changeMoveStatus(false);\n            }\n        }\n    }\n}","undoManager":{"mark":98,"position":100,"stack":[[{"start":{"row":44,"column":32},"end":{"row":44,"column":36},"action":"remove","lines":["Flag"],"id":2631}],[{"start":{"row":44,"column":32},"end":{"row":44,"column":33},"action":"remove","lines":["s"],"id":2632}],[{"start":{"row":44,"column":32},"end":{"row":44,"column":33},"action":"insert","lines":["S"],"id":2633}],[{"start":{"row":44,"column":33},"end":{"row":44,"column":34},"action":"insert","lines":["t"],"id":2634}],[{"start":{"row":44,"column":34},"end":{"row":44,"column":35},"action":"insert","lines":["a"],"id":2635}],[{"start":{"row":44,"column":35},"end":{"row":44,"column":36},"action":"insert","lines":["t"],"id":2636}],[{"start":{"row":44,"column":36},"end":{"row":44,"column":37},"action":"insert","lines":["u"],"id":2637}],[{"start":{"row":44,"column":37},"end":{"row":44,"column":38},"action":"insert","lines":["s"],"id":2638}],[{"start":{"row":281,"column":28},"end":{"row":281,"column":29},"action":"remove","lines":["g"],"id":2639}],[{"start":{"row":281,"column":28},"end":{"row":281,"column":29},"action":"remove","lines":["s"],"id":2640}],[{"start":{"row":281,"column":27},"end":{"row":281,"column":28},"action":"remove","lines":["a"],"id":2641}],[{"start":{"row":281,"column":26},"end":{"row":281,"column":27},"action":"remove","lines":["l"],"id":2642}],[{"start":{"row":281,"column":25},"end":{"row":281,"column":26},"action":"remove","lines":["F"],"id":2643}],[{"start":{"row":281,"column":25},"end":{"row":281,"column":26},"action":"insert","lines":["S"],"id":2644}],[{"start":{"row":281,"column":26},"end":{"row":281,"column":27},"action":"insert","lines":["t"],"id":2645}],[{"start":{"row":281,"column":27},"end":{"row":281,"column":28},"action":"insert","lines":["a"],"id":2646}],[{"start":{"row":281,"column":28},"end":{"row":281,"column":29},"action":"insert","lines":["t"],"id":2647}],[{"start":{"row":281,"column":12},"end":{"row":281,"column":29},"action":"remove","lines":["resetMovementStat"],"id":2648},{"start":{"row":281,"column":12},"end":{"row":281,"column":31},"action":"insert","lines":["resetMovementStatus"]}],[{"start":{"row":30,"column":4},"end":{"row":31,"column":0},"action":"insert","lines":["",""],"id":2649},{"start":{"row":31,"column":0},"end":{"row":31,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":31,"column":4},"end":{"row":31,"column":5},"action":"insert","lines":["/"],"id":2650}],[{"start":{"row":31,"column":5},"end":{"row":31,"column":6},"action":"insert","lines":["/"],"id":2651}],[{"start":{"row":31,"column":6},"end":{"row":31,"column":7},"action":"insert","lines":["d"],"id":2652}],[{"start":{"row":31,"column":7},"end":{"row":31,"column":8},"action":"insert","lines":["r"],"id":2653}],[{"start":{"row":31,"column":8},"end":{"row":31,"column":9},"action":"insert","lines":["a"],"id":2654}],[{"start":{"row":31,"column":9},"end":{"row":31,"column":10},"action":"insert","lines":["w"],"id":2655}],[{"start":{"row":31,"column":10},"end":{"row":31,"column":11},"action":"insert","lines":["s"],"id":2656}],[{"start":{"row":31,"column":11},"end":{"row":31,"column":12},"action":"insert","lines":[" "],"id":2657}],[{"start":{"row":31,"column":12},"end":{"row":31,"column":13},"action":"insert","lines":["t"],"id":2658}],[{"start":{"row":31,"column":13},"end":{"row":31,"column":14},"action":"insert","lines":["h"],"id":2659}],[{"start":{"row":31,"column":14},"end":{"row":31,"column":15},"action":"insert","lines":["e"],"id":2660}],[{"start":{"row":31,"column":15},"end":{"row":31,"column":16},"action":"insert","lines":[" "],"id":2661}],[{"start":{"row":31,"column":16},"end":{"row":31,"column":17},"action":"insert","lines":["c"],"id":2662}],[{"start":{"row":31,"column":16},"end":{"row":31,"column":17},"action":"remove","lines":["c"],"id":2663}],[{"start":{"row":31,"column":16},"end":{"row":31,"column":17},"action":"insert","lines":["g"],"id":2664}],[{"start":{"row":31,"column":17},"end":{"row":31,"column":18},"action":"insert","lines":["r"],"id":2665}],[{"start":{"row":31,"column":18},"end":{"row":31,"column":19},"action":"insert","lines":["i"],"id":2666}],[{"start":{"row":31,"column":19},"end":{"row":31,"column":20},"action":"insert","lines":["d"],"id":2667}],[{"start":{"row":31,"column":20},"end":{"row":31,"column":21},"action":"insert","lines":[" "],"id":2668}],[{"start":{"row":31,"column":21},"end":{"row":31,"column":22},"action":"insert","lines":["t"],"id":2669}],[{"start":{"row":31,"column":22},"end":{"row":31,"column":23},"action":"insert","lines":["o"],"id":2670}],[{"start":{"row":31,"column":23},"end":{"row":31,"column":24},"action":"insert","lines":[" "],"id":2671}],[{"start":{"row":31,"column":24},"end":{"row":31,"column":25},"action":"insert","lines":["t"],"id":2672}],[{"start":{"row":31,"column":25},"end":{"row":31,"column":26},"action":"insert","lines":["h"],"id":2673}],[{"start":{"row":31,"column":26},"end":{"row":31,"column":27},"action":"insert","lines":["e"],"id":2674}],[{"start":{"row":31,"column":27},"end":{"row":31,"column":28},"action":"insert","lines":[" "],"id":2675}],[{"start":{"row":31,"column":28},"end":{"row":31,"column":29},"action":"insert","lines":["c"],"id":2676}],[{"start":{"row":31,"column":29},"end":{"row":31,"column":30},"action":"insert","lines":["o"],"id":2677}],[{"start":{"row":31,"column":30},"end":{"row":31,"column":31},"action":"insert","lines":["n"],"id":2678}],[{"start":{"row":31,"column":31},"end":{"row":31,"column":32},"action":"insert","lines":["s"],"id":2679}],[{"start":{"row":31,"column":32},"end":{"row":31,"column":33},"action":"insert","lines":["o"],"id":2680}],[{"start":{"row":31,"column":33},"end":{"row":31,"column":34},"action":"insert","lines":["l"],"id":2681}],[{"start":{"row":31,"column":34},"end":{"row":31,"column":35},"action":"insert","lines":["e"],"id":2682}],[{"start":{"row":32,"column":20},"end":{"row":33,"column":0},"action":"insert","lines":["",""],"id":2683},{"start":{"row":33,"column":0},"end":{"row":33,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":33,"column":4},"end":{"row":34,"column":0},"action":"insert","lines":["",""],"id":2684},{"start":{"row":34,"column":0},"end":{"row":34,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":34,"column":4},"end":{"row":34,"column":5},"action":"insert","lines":["/"],"id":2685}],[{"start":{"row":34,"column":5},"end":{"row":34,"column":6},"action":"insert","lines":["/"],"id":2686}],[{"start":{"row":34,"column":6},"end":{"row":34,"column":7},"action":"insert","lines":["i"],"id":2687}],[{"start":{"row":34,"column":7},"end":{"row":34,"column":8},"action":"insert","lines":["n"],"id":2688}],[{"start":{"row":34,"column":8},"end":{"row":34,"column":9},"action":"insert","lines":["i"],"id":2689}],[{"start":{"row":34,"column":9},"end":{"row":34,"column":10},"action":"insert","lines":["t"],"id":2690}],[{"start":{"row":34,"column":10},"end":{"row":34,"column":11},"action":"insert","lines":["i"],"id":2691}],[{"start":{"row":34,"column":11},"end":{"row":34,"column":12},"action":"insert","lines":["a"],"id":2692}],[{"start":{"row":34,"column":12},"end":{"row":34,"column":13},"action":"insert","lines":["l"],"id":2693}],[{"start":{"row":34,"column":13},"end":{"row":34,"column":14},"action":"insert","lines":["i"],"id":2694}],[{"start":{"row":34,"column":14},"end":{"row":34,"column":15},"action":"insert","lines":["z"],"id":2695}],[{"start":{"row":34,"column":15},"end":{"row":34,"column":16},"action":"insert","lines":["a"],"id":2696}],[{"start":{"row":34,"column":15},"end":{"row":34,"column":16},"action":"remove","lines":["a"],"id":2697}],[{"start":{"row":34,"column":15},"end":{"row":34,"column":16},"action":"insert","lines":["e"],"id":2698}],[{"start":{"row":34,"column":16},"end":{"row":34,"column":17},"action":"insert","lines":["s"],"id":2699}],[{"start":{"row":34,"column":17},"end":{"row":34,"column":18},"action":"insert","lines":[" "],"id":2700}],[{"start":{"row":34,"column":18},"end":{"row":34,"column":19},"action":"insert","lines":["t"],"id":2701}],[{"start":{"row":34,"column":19},"end":{"row":34,"column":20},"action":"insert","lines":["h"],"id":2702}],[{"start":{"row":34,"column":20},"end":{"row":34,"column":21},"action":"insert","lines":["e"],"id":2703}],[{"start":{"row":34,"column":21},"end":{"row":34,"column":22},"action":"insert","lines":[" "],"id":2704}],[{"start":{"row":34,"column":22},"end":{"row":34,"column":23},"action":"insert","lines":["b"],"id":2705}],[{"start":{"row":34,"column":23},"end":{"row":34,"column":24},"action":"insert","lines":["o"],"id":2706}],[{"start":{"row":34,"column":24},"end":{"row":34,"column":25},"action":"insert","lines":["a"],"id":2707}],[{"start":{"row":34,"column":25},"end":{"row":34,"column":26},"action":"insert","lines":["r"],"id":2708}],[{"start":{"row":34,"column":26},"end":{"row":34,"column":27},"action":"insert","lines":["d"],"id":2709}],[{"start":{"row":191,"column":0},"end":{"row":228,"column":1},"action":"remove","lines":["void Ant::move()","{","    //breedTicks++;adsadasdadasdasdasdsa","    int direction;","    direction = rand() % 4 + 1;","    switch (direction){","        case 1:","            if(organismBoard->getOrganism(xCoord, yCoord + 1) == NULL && boundaryFlag(xCoord, yCoord + 1))","            {","                newLocation(xCoord, yCoord + 1);","                moveComplete = true;","            }","            break;","        case 3:","            if(organismBoard->getOrganism(xCoord, yCoord - 1) == NULL && boundaryFlag(xCoord, yCoord - 1))","            {","                newLocation(xCoord, yCoord - 1);","                moveComplete = true;","            }","            break;","        case 4:","            if(organismBoard->getOrganism(xCoord - 1, yCoord) == NULL && boundaryFlag(xCoord - 1, yCoord))","            {","                newLocation(xCoord - 1, yCoord);","                moveComplete = true;","            }","            break;","        case 2:","            if(organismBoard->getOrganism(xCoord + 1, yCoord) == NULL && boundaryFlag(xCoord + 1, yCoord))","            {","                newLocation(xCoord + 1, yCoord);","                moveComplete = true;","            }","            break;","        default:","            break;","    }","}"],"id":2864},{"start":{"row":191,"column":0},"end":{"row":229,"column":1},"action":"insert","lines":["void Ant::move()","{","    //breedTicks++;adsadasdadasdasdasdsa","    int direction;","    direction = rand() % 4 + 1;","    ","    if(direction == 1)","    {","        if(organismBoard->getOrganism(xCoord, yCoord + 1) == NULL && boundaryFlag(xCoord, yCoord + 1))","        {","            newLocation(xCoord, yCoord + 1);","            moveComplete = true;","        }","    }","    else if(direction == 2)","    {","       if(organismBoard->getOrganism(xCoord + 1, yCoord) == NULL && boundaryFlag(xCoord + 1, yCoord))","        {","            newLocation(xCoord + 1, yCoord);","            moveComplete = true;","        } ","    }","    else if(direction == 3)","    {","        if(organismBoard->getOrganism(xCoord, yCoord - 1) == NULL && boundaryFlag(xCoord, yCoord - 1))","        {","            newLocation(xCoord, yCoord - 1);","            moveComplete = true;","        }","    }","    else if(direction == 4)","    {","        if(organismBoard->getOrganism(xCoord - 1, yCoord) == NULL && boundaryFlag(xCoord - 1, yCoord))","            {","                newLocation(xCoord - 1, yCoord);","                moveComplete = true;","            }","    }","}"]}],[{"start":{"row":7,"column":0},"end":{"row":38,"column":2},"action":"remove","lines":["class Board","{","    public:","    //grid board where the organisms are located","    Organism *grid[20][20];","    ","    //Default constructor","    Board();","    ","    //Destructor","    ~Board();","    ","    //Returns the organism at a location","    Organism* getOrganism(int x, int y) const;","    ","    //sets the organism at a location","    void setOrganism(int x, int y, Organism* spawn);","    ","    //Goes through grid and moves all organisms","    void moveOrganisms();","    ","    //Resets all movement flags","    void resetMovementStatus();","    ","    //draws the grid to the console","    void drawGrid();","    ","    //initializes the board","    void initializeBoard();","","    private:","};"],"id":2865}],[{"start":{"row":3,"column":22},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":2866}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":1},"action":"insert","lines":["#"],"id":2867}],[{"start":{"row":4,"column":1},"end":{"row":4,"column":2},"action":"insert","lines":["i"],"id":2868}],[{"start":{"row":4,"column":2},"end":{"row":4,"column":3},"action":"insert","lines":["n"],"id":2869}],[{"start":{"row":4,"column":3},"end":{"row":4,"column":4},"action":"insert","lines":["c"],"id":2870}],[{"start":{"row":4,"column":4},"end":{"row":4,"column":5},"action":"insert","lines":["l"],"id":2871}],[{"start":{"row":4,"column":5},"end":{"row":4,"column":6},"action":"insert","lines":["u"],"id":2872}],[{"start":{"row":4,"column":6},"end":{"row":4,"column":7},"action":"insert","lines":["d"],"id":2873}],[{"start":{"row":4,"column":7},"end":{"row":4,"column":8},"action":"insert","lines":["e"],"id":2874}],[{"start":{"row":4,"column":8},"end":{"row":4,"column":9},"action":"insert","lines":[" "],"id":2875}],[{"start":{"row":4,"column":9},"end":{"row":4,"column":11},"action":"insert","lines":["\"\""],"id":2876}],[{"start":{"row":4,"column":10},"end":{"row":4,"column":11},"action":"insert","lines":["b"],"id":2877}],[{"start":{"row":4,"column":11},"end":{"row":4,"column":12},"action":"insert","lines":["o"],"id":2878}],[{"start":{"row":4,"column":12},"end":{"row":4,"column":13},"action":"insert","lines":["a"],"id":2879}],[{"start":{"row":4,"column":13},"end":{"row":4,"column":14},"action":"insert","lines":["r"],"id":2880}],[{"start":{"row":4,"column":14},"end":{"row":4,"column":15},"action":"insert","lines":["d"],"id":2881}],[{"start":{"row":4,"column":15},"end":{"row":4,"column":16},"action":"insert","lines":["."],"id":2882}],[{"start":{"row":4,"column":16},"end":{"row":4,"column":17},"action":"insert","lines":["h"],"id":2883}],[{"start":{"row":8,"column":0},"end":{"row":9,"column":0},"action":"remove","lines":["",""],"id":2884}],[{"start":{"row":7,"column":0},"end":{"row":8,"column":0},"action":"remove","lines":["",""],"id":2885}]]},"ace":{"folds":[],"scrolltop":3622,"scrollleft":0,"selection":{"start":{"row":151,"column":18},"end":{"row":151,"column":18},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":245,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1508816681191}