{"filter":false,"title":"board.cpp","tooltip":"/board.cpp","undoManager":{"mark":61,"position":61,"stack":[[{"start":{"row":0,"column":0},"end":{"row":216,"column":1},"action":"insert","lines":["Board::Board()","{","    //This is the default constructor for the board class","    ","    //creating an empty array","    for (int y = 0; y < 20; y++)","        for (int x = 0; x < 20; x++)","            grid[x][y] = nullptr;","","    //Initialize ants and doodlebugs","    initializeBoard();","}","","Board::~Board() ","{","    //This is the destructor for the board class","    ","    //loop to delete all grid elements","    for (int i = 0; i < 20; i++) ","    {","        for (int j = 0; j < 20; j++) ","        {","            if (grid[i][j] != NULL)","            {","                delete grid[i][j];","                grid[i][j] = nullptr;","            }","        }","    }","}","","void Board::drawGrid()","{","    //This member function draws the Ants, Doodlebugs","    //and empty spaces on a 20x20 grid.","    ","    //lineNum gives each line of the grid a number","    int lineNum = 0;","    ","    //This loop decides what symbol represents each element of the grid","    for (int y = 0; y < 20; y++)","    {","        lineNum++;","        //cout << lineNum;","        for (int x = 0; x < 20; x++)","        {","            if (grid[x][y] == nullptr)","            {","                //empty cells","                cout << '.'; ","            }","            else","            {","                //occupied cells","                cout << grid[x][y]->getIdentifier();","            }","        }","        //next line","        cout << endl;","    }","}","","void Board::initializeBoard()","{","    //This member function initializes ants and doodlebugs","    ","    int doodleX, doodleY;","    int antX, antY;","","    //seed random number generator","    srand(time(NULL));","","    //Create 5 doodlebugs","    for (int doodleAmount = 0; doodleAmount < 5; doodleAmount++)","    {","        doodleX = rand() % 20;","        doodleY = rand() % 20;","","        //If cell is occupied try again","        while (grid[doodleX][doodleY] != nullptr)","        {","            doodleX = rand() % 20;","            doodleY = rand() % 20;","        }","        grid[doodleX][doodleY] = new Doodlebug(doodleX, doodleY, this);","    }","    //Create 100 ants","    for (int antAmount = 0; antAmount < 100; antAmount++)","    {","        antX = rand() % 20;","        antY = rand() % 20;","","        //If cell is occupied try again","        while (grid[antX][antY] != nullptr)","        {","            antX = rand() % 20;","            antY = rand() % 20;","        }","        grid[antX][antY] = new Ant(antX, antY, this);","    }","}","","void Board::moveOrganisms()","{","    //This function will move all organisms on the grid if they haven't move","    //yet this turn","    ","    for(int i = 0; i < 20; i++)","    {","        for(int j = 0; j < 20; j++)","        {","            //check for occupied grid spaces","            if(grid[i][j] != NULL)","            {","                //check movement status","                if(grid[i][j]->getMovementStatus() == false)","                {","                    //move organism at grid element","                    grid[i][j]->move();","                }","            }","        }","    }","}","","Organism* Board::getOrganism(int x, int y) const ","{","    //This function will return the organism occupying a grid location","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        return grid[x][y];","    } else ","    {","        return NULL;","    }","}","","void Board::setOrganism(int x, int y, Organism* newOrganism) ","{","    //This function will set the organism at a certain grid location","    //to a new organism passed into the function","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        grid[x][y] = newOrganism;","    }","}","","void Board::setNewAnt(int x, int y)","{","    //This function will create a new and at location passed in","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        grid[x][y] = new Ant(x, y, this);","    }","}","","void Board::setNewDoodle(int x, int y)","{","    //This function will create a new doodlebug at location passed in","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        grid[x][y] = new Doodlebug(x, y, this);","    }","}","","void Board::breedOrganisms()","{","    //This function will attempt to make all organisms breed in the grid","    ","    for(int i = 0; i < 20; i++)","    {","        for(int j = 0; j < 20; j++)","        {","            if(grid[i][j] != NULL)","            {","                grid[i][j]->breed();","            }","        }","    }","}","","void Board::starveOrganisms()","{","    //This function will starve all doodlebugs that have not eaten recently","    for (int i = 0; i < 20; i++) ","    {","        for (int j = 0; j < 20; j++)","        {","            //check for doodlebugs that are starving","            if ((grid[i][j] != NULL) && grid[i][j]->isStarving()) ","            {","                delete grid[i][j];","                grid[i][j] = NULL;","            }","        }","    }","}","","void Board::resetMovementStatus() ","{","    //This function will reset the movement status of all organisms","    //on the grid.","    for(int i = 0; i < 20; i++)","    {","        for (int j = 0; j < 20; j++)","        {","            if(grid[i][j] != NULL)","            {","                grid[i][j]->setMoveStatus(false);","            }","        }","    }","}"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":4}],[{"start":{"row":1,"column":0},"end":{"row":1,"column":1},"action":"insert","lines":["u"],"id":5}],[{"start":{"row":1,"column":1},"end":{"row":1,"column":2},"action":"insert","lines":["s"],"id":6}],[{"start":{"row":1,"column":2},"end":{"row":1,"column":3},"action":"insert","lines":["i"],"id":7}],[{"start":{"row":1,"column":3},"end":{"row":1,"column":4},"action":"insert","lines":["n"],"id":8}],[{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"insert","lines":["g"],"id":9}],[{"start":{"row":1,"column":5},"end":{"row":1,"column":6},"action":"insert","lines":[" "],"id":10}],[{"start":{"row":1,"column":5},"end":{"row":1,"column":6},"action":"remove","lines":[" "],"id":11}],[{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"remove","lines":["g"],"id":12}],[{"start":{"row":1,"column":3},"end":{"row":1,"column":4},"action":"remove","lines":["n"],"id":13}],[{"start":{"row":1,"column":2},"end":{"row":1,"column":3},"action":"remove","lines":["i"],"id":14}],[{"start":{"row":1,"column":1},"end":{"row":1,"column":2},"action":"remove","lines":["s"],"id":15}],[{"start":{"row":1,"column":0},"end":{"row":1,"column":1},"action":"remove","lines":["u"],"id":16}],[{"start":{"row":0,"column":0},"end":{"row":219,"column":1},"action":"remove","lines":["","","","Board::Board()","{","    //This is the default constructor for the board class","    ","    //creating an empty array","    for (int y = 0; y < 20; y++)","        for (int x = 0; x < 20; x++)","            grid[x][y] = nullptr;","","    //Initialize ants and doodlebugs","    initializeBoard();","}","","Board::~Board() ","{","    //This is the destructor for the board class","    ","    //loop to delete all grid elements","    for (int i = 0; i < 20; i++) ","    {","        for (int j = 0; j < 20; j++) ","        {","            if (grid[i][j] != NULL)","            {","                delete grid[i][j];","                grid[i][j] = nullptr;","            }","        }","    }","}","","void Board::drawGrid()","{","    //This member function draws the Ants, Doodlebugs","    //and empty spaces on a 20x20 grid.","    ","    //lineNum gives each line of the grid a number","    int lineNum = 0;","    ","    //This loop decides what symbol represents each element of the grid","    for (int y = 0; y < 20; y++)","    {","        lineNum++;","        //cout << lineNum;","        for (int x = 0; x < 20; x++)","        {","            if (grid[x][y] == nullptr)","            {","                //empty cells","                cout << '.'; ","            }","            else","            {","                //occupied cells","                cout << grid[x][y]->getIdentifier();","            }","        }","        //next line","        cout << endl;","    }","}","","void Board::initializeBoard()","{","    //This member function initializes ants and doodlebugs","    ","    int doodleX, doodleY;","    int antX, antY;","","    //seed random number generator","    srand(time(NULL));","","    //Create 5 doodlebugs","    for (int doodleAmount = 0; doodleAmount < 5; doodleAmount++)","    {","        doodleX = rand() % 20;","        doodleY = rand() % 20;","","        //If cell is occupied try again","        while (grid[doodleX][doodleY] != nullptr)","        {","            doodleX = rand() % 20;","            doodleY = rand() % 20;","        }","        grid[doodleX][doodleY] = new Doodlebug(doodleX, doodleY, this);","    }","    //Create 100 ants","    for (int antAmount = 0; antAmount < 100; antAmount++)","    {","        antX = rand() % 20;","        antY = rand() % 20;","","        //If cell is occupied try again","        while (grid[antX][antY] != nullptr)","        {","            antX = rand() % 20;","            antY = rand() % 20;","        }","        grid[antX][antY] = new Ant(antX, antY, this);","    }","}","","void Board::moveOrganisms()","{","    //This function will move all organisms on the grid if they haven't move","    //yet this turn","    ","    for(int i = 0; i < 20; i++)","    {","        for(int j = 0; j < 20; j++)","        {","            //check for occupied grid spaces","            if(grid[i][j] != NULL)","            {","                //check movement status","                if(grid[i][j]->getMovementStatus() == false)","                {","                    //move organism at grid element","                    grid[i][j]->move();","                }","            }","        }","    }","}","","Organism* Board::getOrganism(int x, int y) const ","{","    //This function will return the organism occupying a grid location","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        return grid[x][y];","    } else ","    {","        return NULL;","    }","}","","void Board::setOrganism(int x, int y, Organism* newOrganism) ","{","    //This function will set the organism at a certain grid location","    //to a new organism passed into the function","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        grid[x][y] = newOrganism;","    }","}","","void Board::setNewAnt(int x, int y)","{","    //This function will create a new and at location passed in","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        grid[x][y] = new Ant(x, y, this);","    }","}","","void Board::setNewDoodle(int x, int y)","{","    //This function will create a new doodlebug at location passed in","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        grid[x][y] = new Doodlebug(x, y, this);","    }","}","","void Board::breedOrganisms()","{","    //This function will attempt to make all organisms breed in the grid","    ","    for(int i = 0; i < 20; i++)","    {","        for(int j = 0; j < 20; j++)","        {","            if(grid[i][j] != NULL)","            {","                grid[i][j]->breed();","            }","        }","    }","}","","void Board::starveOrganisms()","{","    //This function will starve all doodlebugs that have not eaten recently","    for (int i = 0; i < 20; i++) ","    {","        for (int j = 0; j < 20; j++)","        {","            //check for doodlebugs that are starving","            if ((grid[i][j] != NULL) && grid[i][j]->isStarving()) ","            {","                delete grid[i][j];","                grid[i][j] = NULL;","            }","        }","    }","}","","void Board::resetMovementStatus() ","{","    //This function will reset the movement status of all organisms","    //on the grid.","    for(int i = 0; i < 20; i++)","    {","        for (int j = 0; j < 20; j++)","        {","            if(grid[i][j] != NULL)","            {","                grid[i][j]->setMoveStatus(false);","            }","        }","    }","}"],"id":18}],[{"start":{"row":0,"column":0},"end":{"row":247,"column":1},"action":"insert","lines":["//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","//MEMBER FUNCTIONS OF BOARD CLASS","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","","Board::Board()","{","    //This is the default constructor for the board class","    ","    //creating an empty array","    for (int y = 0; y < 20; y++)","        for (int x = 0; x < 20; x++)","            grid[x][y] = nullptr;","","    //Initialize ants and doodlebugs","    initializeBoard();","}","","Board::~Board() ","{","    //This is the destructor for the board class","    ","    //loop to delete all grid elements","    for (int i = 0; i < 20; i++) ","    {","        for (int j = 0; j < 20; j++) ","        {","            if (grid[i][j] != NULL)","            {","                delete grid[i][j];","                grid[i][j] = nullptr;","            }","        }","    }","}","","void Board::drawGrid()","{","    //This member function draws the Ants, Doodlebugs","    //and empty spaces on a 20x20 grid.","    ","    //lineNum gives each line of the grid a number","    int lineNum = 0;","    ","    //This loop decides what symbol represents each element of the grid","    for (int y = 0; y < 20; y++)","    {","        lineNum++;","        //cout << lineNum;","        for (int x = 0; x < 20; x++)","        {","            if (grid[x][y] == nullptr)","            {","                //empty cells","                cout << '.'; ","            }","            else","            {","                //occupied cells","                cout << grid[x][y]->getIdentifier();","            }","        }","        //next line","        cout << endl;","    }","}","","void Board::initializeBoard()","{","    //This member function initializes ants and doodlebugs","    ","    int doodleX, doodleY;","    int antX, antY;","","    //seed random number generator","    srand(time(NULL));","","    //Create 5 doodlebugs","    for (int doodleAmount = 0; doodleAmount < 5; doodleAmount++)","    {","        doodleX = rand() % 20;","        doodleY = rand() % 20;","","        //If cell is occupied try again","        while (grid[doodleX][doodleY] != nullptr)","        {","            doodleX = rand() % 20;","            doodleY = rand() % 20;","        }","        grid[doodleX][doodleY] = new Doodlebug(doodleX, doodleY, this);","    }","    //Create 100 ants","    for (int antAmount = 0; antAmount < 100; antAmount++)","    {","        antX = rand() % 20;","        antY = rand() % 20;","","        //If cell is occupied try again","        while (grid[antX][antY] != nullptr)","        {","            antX = rand() % 20;","            antY = rand() % 20;","        }","        grid[antX][antY] = new Ant(antX, antY, this);","    }","}","","void Board::moveOrganisms()","{","    //This function will move all organisms on the grid if they haven't move","    //yet this turn","    ","    //first move all doodlebugs","    for(int i = 0; i < 20; i++)","    {","        for(int j = 0; j < 20; j++)","        {","            //check for occupied grid spaces","            if(grid[i][j] != NULL)","            {","                //check movement status","                if(grid[i][j]->getMovementStatus() == false)","                {","                    //check organism is a doodlebug","                    if(grid[i][j]->getIdentifier() == 'D')","                    {","                        //move doodlebug","                        grid[i][j]->move();","                    }","                }","            }","        }","    }","    ","    //next move ants","    for(int i = 0; i < 20; i++)","    {","        for(int j = 0; j < 20; j++)","        {","            //check for occupied grid spaces","            if(grid[i][j] != NULL)","            {","                //check movement status","                if(grid[i][j]->getMovementStatus() == false)","                {","                    //check organism is an ant","                    if(grid[i][j]->getIdentifier() == 'A')","                    {","                        //move ant","                        grid[i][j]->move();","                    }","                }","            }","        }","    }","}","","Organism* Board::getOrganism(int x, int y) const ","{","    //This function will return the organism occupying a grid location","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        return grid[x][y];","    } else ","    {","        return NULL;","    }","}","","void Board::setOrganism(int x, int y, Organism* newOrganism) ","{","    //This function will set the organism at a certain grid location","    //to a new organism passed into the function","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        grid[x][y] = newOrganism;","    }","}","","void Board::setNewAnt(int x, int y)","{","    //This function will create a new and at location passed in","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        grid[x][y] = new Ant(x, y, this);","    }","}","","void Board::setNewDoodle(int x, int y)","{","    //This function will create a new doodlebug at location passed in","    ","    if ((x >= 0) && (x < 20) && (y >= 0) && (y < 20)) ","    {","        grid[x][y] = new Doodlebug(x, y, this);","    }","}","","void Board::breedOrganisms()","{","    //This function will attempt to make all organisms breed in the grid","    ","    for(int i = 0; i < 20; i++)","    {","        for(int j = 0; j < 20; j++)","        {","            if(grid[i][j] != NULL)","            {","                grid[i][j]->breed();","            }","        }","    }","}","","void Board::starveOrganisms()","{","    //This function will starve all doodlebugs that have not eaten recently","    for (int i = 0; i < 20; i++) ","    {","        for (int j = 0; j < 20; j++)","        {","            //check for doodlebugs that are starving","            if ((grid[i][j] != NULL) && grid[i][j]->isStarving()) ","            {","                delete grid[i][j];","                grid[i][j] = NULL;","            }","        }","    }","}","","void Board::resetMovementStatus() ","{","    //This function will reset the movement status of all organisms","    //on the grid.","    for(int i = 0; i < 20; i++)","    {","        for (int j = 0; j < 20; j++)","        {","            if(grid[i][j] != NULL)","            {","                grid[i][j]->setMoveStatus(false);","            }","        }","    }","}"],"id":19}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":20}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":21}],[{"start":{"row":0,"column":0},"end":{"row":5,"column":20},"action":"insert","lines":["#include <iostream>","#include <cstdlib>  // for rand","#include \"World.h\"","#include \"Ant.h\"","#include \"Bug.h\"","using namespace std;"],"id":22}],[{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"remove","lines":["d"],"id":23}],[{"start":{"row":2,"column":13},"end":{"row":2,"column":14},"action":"remove","lines":["l"],"id":24}],[{"start":{"row":2,"column":12},"end":{"row":2,"column":13},"action":"remove","lines":["r"],"id":25}],[{"start":{"row":2,"column":11},"end":{"row":2,"column":12},"action":"remove","lines":["o"],"id":26}],[{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"remove","lines":["W"],"id":27}],[{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"insert","lines":["b"],"id":28}],[{"start":{"row":2,"column":11},"end":{"row":2,"column":12},"action":"insert","lines":["o"],"id":29}],[{"start":{"row":2,"column":12},"end":{"row":2,"column":13},"action":"insert","lines":["a"],"id":30}],[{"start":{"row":2,"column":13},"end":{"row":2,"column":14},"action":"insert","lines":["r"],"id":31}],[{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"insert","lines":["d"],"id":32}],[{"start":{"row":3,"column":12},"end":{"row":3,"column":13},"action":"remove","lines":["t"],"id":33}],[{"start":{"row":3,"column":11},"end":{"row":3,"column":12},"action":"remove","lines":["n"],"id":34}],[{"start":{"row":3,"column":10},"end":{"row":3,"column":11},"action":"remove","lines":["A"],"id":35}],[{"start":{"row":3,"column":10},"end":{"row":3,"column":11},"action":"insert","lines":["a"],"id":36}],[{"start":{"row":3,"column":11},"end":{"row":3,"column":12},"action":"insert","lines":["n"],"id":37}],[{"start":{"row":3,"column":12},"end":{"row":3,"column":13},"action":"insert","lines":["t"],"id":38}],[{"start":{"row":4,"column":12},"end":{"row":4,"column":13},"action":"remove","lines":["g"],"id":39}],[{"start":{"row":4,"column":11},"end":{"row":4,"column":12},"action":"remove","lines":["u"],"id":40}],[{"start":{"row":4,"column":10},"end":{"row":4,"column":11},"action":"remove","lines":["B"],"id":41}],[{"start":{"row":4,"column":10},"end":{"row":4,"column":11},"action":"insert","lines":["d"],"id":42}],[{"start":{"row":4,"column":11},"end":{"row":4,"column":12},"action":"insert","lines":["o"],"id":43}],[{"start":{"row":4,"column":12},"end":{"row":4,"column":13},"action":"insert","lines":["o"],"id":44}],[{"start":{"row":4,"column":13},"end":{"row":4,"column":14},"action":"insert","lines":["d"],"id":45}],[{"start":{"row":4,"column":14},"end":{"row":4,"column":15},"action":"insert","lines":["l"],"id":46}],[{"start":{"row":4,"column":15},"end":{"row":4,"column":16},"action":"insert","lines":["e"],"id":47}],[{"start":{"row":4,"column":16},"end":{"row":4,"column":17},"action":"insert","lines":["b"],"id":48}],[{"start":{"row":4,"column":17},"end":{"row":4,"column":18},"action":"insert","lines":["u"],"id":49}],[{"start":{"row":4,"column":18},"end":{"row":4,"column":19},"action":"insert","lines":["g"],"id":50}],[{"start":{"row":1,"column":30},"end":{"row":1,"column":31},"action":"remove","lines":["d"],"id":51}],[{"start":{"row":1,"column":29},"end":{"row":1,"column":30},"action":"remove","lines":["n"],"id":52}],[{"start":{"row":1,"column":28},"end":{"row":1,"column":29},"action":"remove","lines":["a"],"id":53}],[{"start":{"row":1,"column":27},"end":{"row":1,"column":28},"action":"remove","lines":["r"],"id":54}],[{"start":{"row":1,"column":26},"end":{"row":1,"column":27},"action":"remove","lines":[" "],"id":55}],[{"start":{"row":1,"column":25},"end":{"row":1,"column":26},"action":"remove","lines":["r"],"id":56}],[{"start":{"row":1,"column":24},"end":{"row":1,"column":25},"action":"remove","lines":["o"],"id":57}],[{"start":{"row":1,"column":23},"end":{"row":1,"column":24},"action":"remove","lines":["f"],"id":58}],[{"start":{"row":1,"column":22},"end":{"row":1,"column":23},"action":"remove","lines":[" "],"id":59}],[{"start":{"row":1,"column":21},"end":{"row":1,"column":22},"action":"remove","lines":["/"],"id":60}],[{"start":{"row":1,"column":20},"end":{"row":1,"column":21},"action":"remove","lines":["/"],"id":61}],[{"start":{"row":1,"column":19},"end":{"row":1,"column":20},"action":"remove","lines":[" "],"id":62}],[{"start":{"row":1,"column":18},"end":{"row":1,"column":19},"action":"remove","lines":[" "],"id":63}]]},"ace":{"folds":[],"scrolltop":2345.1679611206055,"scrollleft":0,"selection":{"start":{"row":1,"column":18},"end":{"row":1,"column":18},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1509162210185,"hash":"901e25c8fbfc834671626b32c2f30d3fa7ed4c02"}